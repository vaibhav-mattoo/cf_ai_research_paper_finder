name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '18'
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Linting not configured"

      - name: Run unit tests
        run: npm run test:unit || echo "Unit tests not configured"

      - name: Run integration tests
        run: npm test

      - name: Test frontend
        run: node test-frontend.js

      - name: Test real papers
        run: node test-real-papers.js

  deploy-staging:
    name: Deploy Backend to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Backend to Staging
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-production:
    name: Deploy Backend to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy Backend to Production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          
          echo "Testing backend health..."
          curl -f https://cf-ai-research-paper-finder.vaibhavmattoo1.workers.dev/health || exit 1
          
          echo "‚úÖ Backend health check passed!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Success
        if: needs.test.result == 'success' && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
        run: |
          echo "üéâ Backend deployment successful!"
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "üöÄ Production backend deployment complete!"
            echo "Backend: https://cf-ai-research-paper-finder.vaibhavmattoo1.workers.dev"
            echo "Frontend: https://5b04b033.cf-ai-research-paper-finder-frontend.pages.dev"
          else
            echo "üß™ Staging backend deployment complete!"
            echo "Backend: https://cf-ai-research-paper-finder-staging.vaibhavmattoo1.workers.dev"
          fi

      - name: Notify Failure
        if: needs.test.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Backend deployment failed!"
          echo "Test status: ${{ needs.test.result }}"
          echo "Staging status: ${{ needs.deploy-staging.result }}"
          echo "Production status: ${{ needs.deploy-production.result }}"
          exit 1